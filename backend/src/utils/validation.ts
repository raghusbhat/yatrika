// Zod schemas for clarification loop
import { z } from "zod";

export const ClarifyInputSchema = z.object({
  input: z.string(), // User's initial input (text or image URL)
});

export type ClarifyInput = z.infer<typeof ClarifyInputSchema>;

export const ClarificationStateSchema = z.object({
  source: z.string().optional(),
  destination: z.string().optional(),
  travelDates: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  duration: z.string().optional(),
  groupType: z.string().optional(),
  budget: z.string().optional(),
  domesticOrInternational: z.string().optional(),
  modeOfTransport: z.string().optional(),
  carModel: z.string().optional(),
  flightPreferences: z.string().optional(),
  accommodation: z.string().optional(),
  travelPace: z.string().optional(),
  occasion: z.string().optional(),
  foodPreference: z.string().optional(),
  specialNeeds: z.string().optional(),
  climatePreference: z.string().optional(),
  interests: z.array(z.string()).optional(),
  tripTheme: z.string().optional(),
  flexibleBudget: z.boolean().optional(),
  flexibleDates: z.boolean().optional(),
  inputHistory: z.array(z.string()),
  isPlanReady: z.boolean(),
});

export type ClarificationState = z.infer<typeof ClarificationStateSchema>;

export function containsPromptInjection(input: string): boolean {
  const patterns = [
    /ignore (all|any|previous|earlier) instructions?/i,
    /disregard (all|any|previous|earlier) instructions?/i,
    /as an? (ai|assistant|language model)/i,
    /repeat this prompt/i,
    /you are now/i,
    /pretend to/i,
    /act as/i,
    /do anything/i,
    /bypass/i,
    /jailbreak/i,
    /system:/i,
    /reset chat/i,
    /unfiltered/i,
    /raw output/i,
    /developer mode/i,
    /simulate/i,
    /ignore content policy/i,
    /break character/i,
    /write code/i,
    /leak/i,
    /confidential/i,
    /secret/i,
    /prompt injection/i,
    /malicious/i,
    /exploit/i,
    /override/i,
    /please respond/i,
    /as a human/i,
    /disclose/i,
    /reveal/i,
    /disable/i,
    /enable/i,
    /execute/i,
    /run command/i,
    /bypass filter/i,
    /no restrictions/i,
    /unrestricted/i,
    /no limits/i,
    /ignore above/i,
    /ignore below/i,
    /ignore all/i,
    /ignore everything/i,
    /forget previous/i,
    /forget all/i,
    /forget everything/i,
    /forget above/i,
    /forget below/i,
    // XSS/HTML/script patterns
    /<\s*script\b[^>]*>/i,
    /<\s*iframe\b[^>]*>/i,
    /<\s*img\b[^>]*>/i,
    /<\s*svg\b[^>]*>/i,
    /<\s*object\b[^>]*>/i,
    /<\s*embed\b[^>]*>/i,
    /<\s*link\b[^>]*>/i,
    /<\s*style\b[^>]*>/i,
    /<\s*form\b[^>]*>/i,
    /<\s*input\b[^>]*>/i,
    /onerror\s*=\s*/i,
    /onload\s*=\s*/i,
    /<\s*\/\s*script\s*>/i,
    /<\s*\/\s*iframe\s*>/i,
    /<\s*\/\s*img\s*>/i,
    /<\s*\/\s*svg\s*>/i,
    /<\s*\/\s*object\s*>/i,
    /<\s*\/\s*embed\s*>/i,
    /<\s*\/\s*link\s*>/i,
    /<\s*\/\s*style\s*>/i,
    /<\s*\/\s*form\s*>/i,
    /<\s*\/\s*input\s*>/i,
    /<\s*[a-z][^>]*>/i, // any angle-bracketed HTML tag
    /<\s*\/\s*[a-z][^>]*>/i, // any closing HTML tag
  ];
  return patterns.some((re) => re.test(input));
}
